name: Sign iOS (Enterprise IPA)

on:
  workflow_dispatch:    # 手动触发

jobs:
  sign-ipa:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter 3.22
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.x'
          cache: true

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      - name: Get Flutter packages
        working-directory: simple_live_app
        run: flutter pub get

      - name: Install iOS pods
        working-directory: simple_live_app/ios
        run: |
          pod repo update
          pod install

      # 创建临时钥匙串并导入 p12 证书
      - name: Import signing certificate
        env:
          P12_BASE64:        ${{ secrets.P12_BASE64 }}
          P12_PASSWORD:      ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -eux
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          echo "$P12_BASE64" | base64 -d > cert.p12
          security import cert.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security find-identity -v -p codesigning build.keychain || true

      # 安装企业 .mobileprovision，并取出 Profile 名称/UUID
      - name: Install provisioning profile
        env:
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
        run: |
          set -eux
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$MOBILEPROVISION_BASE64" | base64 -d > profile.mobileprovision
          /usr/bin/security cms -D -i profile.mobileprovision > profile.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print:UUID' profile.plist)
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print:Name' profile.plist)
          echo "PROFILE_UUID=$PROFILE_UUID" | tee -a $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" | tee -a $GITHUB_ENV
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

      # 归档（Release/iphoneos，手动签名）
      - name: Archive (Release)
        working-directory: simple_live_app
        env:
          TEAM_ID:           ${{ secrets.TEAM_ID }}
          BUNDLE_ID:         ${{ secrets.BUNDLE_ID }}
          CERT_COMMON_NAME:  ${{ secrets.CERT_COMMON_NAME }}
          PROFILE_NAME:      ${{ env.PROFILE_NAME }}
        run: |
          set -eux
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/Runner.xcarchive \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            CODE_SIGN_IDENTITY="$CERT_COMMON_NAME" \
            clean archive | xcpretty

      # 生成 ExportOptions.plist（enterprise + 指定 profile）
      - name: Create ExportOptions.plist
        working-directory: simple_live_app
        env:
          TEAM_ID:      ${{ secrets.TEAM_ID }}
          BUNDLE_ID:    ${{ secrets.BUNDLE_ID }}
          PROFILE_NAME: ${{ env.PROFILE_NAME }}
        run: |
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>enterprise</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          EOF
          /usr/bin/plutil -p ExportOptions.plist

      # 导出“已签名企业 IPA”
      - name: Export signed IPA
        working-directory: simple_live_app
        run: |
          set -eux
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist ExportOptions.plist | xcpretty
          ls -lh build/export

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-enterprise-ipa
          path: simple_live_app/build/export/*.ipa
          if-no-files-found: error
